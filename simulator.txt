##################################################################################
#    Class Simulator
##################################################################################
import copy
class Simulator (object):
	
	def __init__(self, opCodeStr, isInstr, insType, data, rmRegNum, shamNum, rnRegNum, rdRtRegNum, immNum,
	             addrNum, shiftNum, litInstr, memLines, numLinesText):
		# Set up cycle sequence list.
		self.cycles = [] # Holds list of cycles, each with state data.  Each CC results in new cycle.
		# Set up BinData column copies.
		self.opCodeStr = opCodeStr
		self.isInstr = isInstr
		self.insType = insType
		self.data = data
		self.rmRegNum = rmRegNum
		self.shamNum = shamNum
		self.rnRegNum = rnRegNum
		self.rdRtRegNum = rdRtRegNum
		self.immNum = immNum
		self.addrNum = addrNum
		self.shiftNum = shiftNum
		self.litInstr = litInstr
		self.memLines = memLines
		self.numLinesText = numLinesText
	###############################################################################
	#   Class Cycle:  a single cycle, and the register/data states at that time.
	###############################################################################
	# NESTED CLASS
	class Cycle(object):
		def __init__(self):
			self.PC = 0
			self.litIns = ''
			self.regState = [0] * 32
			self.datState = []
	###############################################################################
	###############################################################################
	def doADD(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		# print '\tInside doADD - memLines[x]:', self.memLines[x]     # TESTPRINT
		# print 'Testing ADD'             #TESTPRINT
		self.rd = self.rdRtRegNum[x]  # Get dest register number.
		# print '\trd:', self.rd          #TESTPRINT
		self.rn = self.rnRegNum[x]  # Get op1 register number.
		# print '\trn:', self.rn          #TESTPRINT
		self.rnVal = self.nextCyc.regState[self.rn]  # Get op1 value.
		# print '\trnVal:', self.rnVal    #TESTPRINT
		self.rm = self.rmRegNum[x]  # Get op2 register number.
		# print '\trm:', self.rm          #TESTPRINT
		self.rmVal = self.nextCyc.regState[self.rm]  # Get op2 value.
		# print '\trmVal:', self.rmVal    #TESTPRINT
		self.rdVal = self.rnVal + self.rmVal  # Get value to save to register.
		# print '\trdVal:', self.rdVal    #TESTPRINT
		nc.regState[self.rd] = self.rdVal
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doSUB(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		self.rd = self.rdRtRegNum[x]  # Get dest register number.
		self.rn = self.rnRegNum[x]  # Get op1 register number.
		self.rnVal = self.nextCyc.regState[self.rn]  # Get op1 value.
		self.rm = self.rmRegNum[x]  # Get op2 register number.
		self.rmVal = self.nextCyc.regState[self.rm]  # Get op2 value.
		self.rdVal = self.rnVal - self.rmVal  # Get value to save to register.
		nc.regState[self.rd] = self.rdVal
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doLSL(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		# print 'Testing LSL...'          #TESTPRINT
		self.rd = self.rdRtRegNum[x]  # Get dest register number.
		# print '\trd:', self.rd          #TESTPRINT
		self.rn = self.rnRegNum[x]  # Get src register number.
		# print '\trn:', self.rn          #TESTPRINT
		self.rnVal = self.nextCyc.regState[self.rn]  # Get src value.
		# print '\trnVal:', self.rnVal    #TESTPRINT
		self.shiftVal = self.shamNum[x]  # Get shift amount.
		# print '\tshiftVal:', self.shiftVal  #TESTPRINT
		#regState[arg1] = (regState[arg2] % (1 << 64)) << shift Code from power point
		self.rdVal = (self.rnVal % (1 << 64)) << self.shiftVal
		# print '\trdVal:', self.rdVal        #TESTPRINT
		nc.regState[self.rd] = self.rdVal
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doLSR(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		self.rd = self.rdRtRegNum[x]  # Get dest register number.
		self.rn = self.rnRegNum[x]  # Get src register number.
		self.rnVal = self.nextCyc.regState[self.rn]  # Get src value.
		self.shiftVal = self.shamNum[x]  # Get shift amount.
		#regState[arg1] = (regState[arg2] % (1 << 64)) << shift
		self.rdVal = (self.rnVal % (1 << 64)) >> self.shiftVal
		nc.regState[self.rd] = self.rdVal
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doASR(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		self.rd = self.rdRtRegNum[x]  # Get dest register number.
		self.rn = self.rnRegNum[x]  # Get src register number.
		self.rnVal = self.nextCyc.regState[self.rn]  # Get src value.
		self.shiftVal = self.shamNum[x]  # Get shift amount.
		self.rdVal = self.rnVal >> self.shiftVal
		nc.regState[self.rd] = self.rdVal
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doAND(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		# print 'Testing AND...'              # TESTPRINT
		self.rd = self.rdRtRegNum[x]
		self.rdVal = self.nextCyc.regState[self.rd]
		# print '\trd:', self.rd              # TESTPRINT
		# print '\trdVal:', self.rdVal        # TESTPRINT
		self.rn = self.rnRegNum[x]
		# print '\trn:', self.rn              # TESTPRINT
		self.rnVal = self.nextCyc.regState[self.rn]
		# print '\trnVal:', bin(self.rnVal)   # TESTPRINT
		self.rm = self.rmRegNum[x]
		# print '\trm:', self.rm              # TESTPRINT
		self.rmVal = self.nextCyc.regState[self.rm]
		# print '\trmVal:', bin(self.rmVal)        # TESTPRINT
		self.thisNum = self.rmVal & self.rnVal
		# print '\trdVal:', self.thisNum      # TESTPRINT
		nc.regState[self.rd] = self.thisNum
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doORR(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		self.rd = self.rdRtRegNum[x]
		self.rdVal = self.nextCyc.regState[self.rd]
		self.rn = self.rnRegNum[x]
		self.rnVal = self.nextCyc.regState[self.rn]
		self.rm = self.rmRegNum[x]
		self.rmVal = self.nextCyc.regState[self.rm]
		self.thisNum = self.rmVal | self.rnVal
		nc.regState[self.rd] = self.thisNum
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doEOR(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		self.rd = self.rdRtRegNum[x]
		self.rdVal = self.nextCyc.regState[self.rd]
		self.rn = self.rnRegNum[x]
		self.rnVal = self.nextCyc.regState[self.rn]
		self.rm = self.rmRegNum[x]
		self.rmVal = self.nextCyc.regState[self.rm]
		self.thisNum = self.rmVal ^ self.rnVal
		nc.regState[self.rd] = self.thisNum
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doADDI(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		# print 'Cycle ' + str(x + 1) + ':   ' + self.litInstr[x]  # TESTPRINT
		# print '\tInside doADD...'       # TESTPRINT
		# print '\t\tmemLines[x]:', self.memLines[x]  # TESTPRINT
		# Get immediate value.
		self.immVal = self.immNum[x]
		# print 'imm: ' + str(self.immVal)  # TESTPRINT
		# Get dest register number and value.
		self.rd = self.rdRtRegNum[x]
		# print 'rd: ' + str(self.rd)  # TESTPRINT
		# print 'rdVal: ' + str(self.nextCyc.regState[self.rd])  # TESTPRINT
		# Get src register value.
		self.rn = self.rnRegNum[x]
		# print 'rn: ' + str(self.rn)  # TESTPRINT
		self.rnVal = nc.regState[self.rn]
		# print 'rnVal: ' + str(self.nextCyc.regState[self.rn])    # TESTPRINT
		# Do the math:  rd = rn + imm
		# There's a lot going on here:  The current cycle (nextCyc) has 32 register files: regState[].
		# We want a specific dest register, IDed by rdRtRegNum[x]:  self.nextCyc.regState[self.rdRtRegNum[x]]
		# One of the operands is currently stored in the register file.  We get that specific src register the
		# same way.  In nextCyc, we need a specific register of the 32, IDed by rnRegNum[].
		# Finally, we have the easy immediate: NOT in a register file, but in immNum[].
		nc.regState[self.rd] = self.rnVal + self.immVal
		# print '\t\tnc.PC:', nc.PC   # TESTPRINT
		# print '\t\tself.nextCyc.PC:', self.nextCyc.PC       # TESTPRINT
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doSUBI(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		self.immVal = self.immNum[x]
		# print 'imm: ' + str(self.immVal)  # TESTPRINT
		self.rd = self.rdRtRegNum[x]
		# print 'rd: ' + str(self.rd)  # TESTPRINT
		# print 'rdVal: ' + str(self.nextCyc.regState[self.rd])  # TESTPRINT
		self.rn = self.rnRegNum[x]
		# print 'rn: ' + str(self.rn)  # TESTPRINT
		self.rnVal = self.nextCyc.regState[self.rn]
		nc.regState[self.rd] = self.rnVal - self.immVal
		nc.litIns = self.litInstr[x]
	###############################################################################
	###############################################################################
	def doCBNZ(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		rd = self.rdRtRegNum[x]
		rdVal = nc.regState[rd]
		addr = self.addrNum[x]
		nc.litIns = self.litInstr[x]
		# print 'Testing CBNZ...'
		# print '\tpc:', nc.PC
		# print '\trd:', rd
		# print '\trdVal:', self.rdVal
		# print '\taddr:', addr
		# addr *= 4
		# print '\taddr *= 4:', addr
		if rdVal != 0:      # If test value != 0, return the offset to adjust the instruction index.
			return addr
		else:
			return 0
	# ###############################################################################
	###############################################################################
	def doCBZ(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		rd = self.rdRtRegNum[x]
		rdVal = nc.regState[rd]
		addr = self.addrNum[x]
		nc.litIns = self.litInstr[x]
		#print 'Testing CBZ...'
		#print '\tpc:', nc.PC
		#print '\trd:', rd
		#print '\trdVal:', rdVal
		#print '\taddr:', addr
		# addr *= 4
		# print '\taddr *= 4:', addr
		if rdVal == 0:      # If test value == 0, return the offset to adjust the instruction index.
			return addr
		else:
			return 0
	# #############################################################################
	###############################################################################
	def doMOVK(self, nc, x):
		BIT_MASK_0 = 0xFFFFFFFFFFFF0000
		BIT_MASK_1 = 0xFFFFFFFF0000FFFF
		BIT_MASK_2 = 0xFFFF0000FFFFFFFF
		BIT_MASK_3 = 0x0000FFFFFFFFFFFF
		rd = self.rdRtRegNum[x]
		nc.litIns = self.litInstr[x]
		if(self.shiftNum[x] == 0):
			nc.regState[rd] = nc.regState[rd] & BIT_MASK_0
		elif(self.shiftNum[x] == 1):
			nc.regState[rd] = nc.regState[rd] & BIT_MASK_1
		elif(self.shiftNum[x] == 2):
			nc.regState[rd] = nc.regState[rd] & BIT_MASK_2
		else:
			nc.regState[rd] = nc.regState[rd] & BIT_MASK_3
		# TESPRINT
		# print "shift num: ", self.shiftNum[x]
		nc.regState[rd] = self.immNum[x] * (2 ** self.shiftNum[x])
	###############################################################################
	###############################################################################
	def doMOVZ(self, nc, x):
		rd = self.rdRtRegNum[x]
		nc.litIns = self.litInstr[x]
		nc.regState[rd] = 0
		nc.regState[rd] = self.immNum[x] * (2 ** self.shiftNum[x])
	###############################################################################
	###############################################################################
	def doNOP(self, nc, x):
		nc.PC = self.memLines[x]  # Increment PC to CURRENT instruction.
		nc.litIns = self.litInstr[x]
	# TESTPRINT
	# print 'nextCyc.regState[self.rd]: ' + str(self.nextCyc.regState[self.rd])

			
	###############################################################################
	#   run:  operates the simulator, which processes each instruction, one cycle
	#   at a time.  Makes copy of old cycle[i - 1], modifies that copy, and then
	#   saves it to the list of cycles.
	###############################################################################
	# FUNCTIONS
	def run(self):
		print "\n>>>>>>>>>>> INSIDE SIMULATOR.run(): YOU WILL BE SIMULATED >>>>>>>>>>>>>>>>> "  # TESTPRINT
		self.nextCyc = self.Cycle()     # Create first EMPTY cycle (empty regState[]).  Not appended to cycles[].
		
		
		self.x = 0
		while (self.x < self.numLinesText):
			print 'In while loop...', self.x, ' ... ', self.litInstr[self.x], ' ... ', self.memLines[self.x]
			self.nextCyc = copy.deepcopy(self.nextCyc)
			######################################## R
			if self.opCodeStr[self.x] == 'ADD':
				self.doADD(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'SUB':
				self.doSUB(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'LSL':
				self.doLSL(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'LSR':
				self.doLSR(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'ASR':
				self.doASR(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'AND':
				self.doAND(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'ORR':
				self.doORR(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'EOR':
				self.doEOR(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'ASR':
				self.doASR(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			######################################## D
			elif self.opCodeStr[self.x] == 'LDUR':
				self.doLDUR(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'STUR':
				self.cycles.append(self.nextCyc)
			######################################## I
			elif self.opCodeStr[self.x] == 'ADDI':
				self.doADDI(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'SUBI':
				self.doSUBI(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			######################################## IM
			elif self.opCodeStr[self.x] == 'MOVK':
				self.doMOVK(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			elif self.opCodeStr[self.x] == 'MOVZ':
				self.doMOVZ(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			######################################## CB
			elif self.opCodeStr[self.x] == 'CBNZ':
				y = self.doCBNZ(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
				#print 'Inside CBNZ...'
				#print '\ty:', y
				#print '\ty += x:', y + self.x
				if y != 0:
					self.x += y
					continue
				#else:
					#print 'y == 0'		
			elif self.opCodeStr[self.x] == 'CBZ':
				y = self.doCBZ(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
				#print 'Inside CBZ...'
				#print '\ty:', y
				#print '\ty += x:', y + self.x
				if y != 0:
					self.x += y
					continue
				#else:
					#print 'y == 0'
			elif self.opCodeStr[self.x] == 'NOP':
				self.doNOP(self.nextCyc, self.x)
				self.cycles.append(self.nextCyc)
			self.x += 1
			
		# print 'Testing cycles:'
		# for cyc in self.cycles:
		# 	print cyc.PC
		# print 'Testing opCodeStr:'
		# for op in self.opCodeStr:
		# 	print op
			
			
		# TEST RUN() DOWN HERE
		self.printCycles()
		print ">>>>>>>>>>> EXITING SIMULATOR.run(): YOU HAVE BEEN SIMULATED >>>>>>>>>>>>>>>>> \n" # TESPRINT
	def printCycle(self, clockCycle):
		'Takes an element in the cycle Register and prints it.'
		print
		print '======================================================================='
		print 'Cycle ' + str(clockCycle + 1) + ':  ' + str(self.cycles[clockCycle].PC) + \
		      '\t\t' + self.cycles[clockCycle].litIns
		print '\nRegisters:'
		z = 0
		for x in range(0, 4):   # Prints all registers 4 rows x 8 columns
			line = 'r' + str(z).zfill(2) + ':\t'
			for y in range (0, 8):
				line += str(self.cycles[clockCycle].regState[y + z]) + '\t'
			print line
			z += 8
		print '\nData:'

	def printCycles(self):
		for x, cycle in enumerate(self.cycles):
			self.printCycle(x)
			

			



